// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:password@127.0.0.1:3307/ticket?connection_limit=20&socket_timeout=5"
}

model Theater {
  id      String   @id @default(cuid())
  address String
  name    String
  screens Screen[]
}

model Screen {
  id         String         @id @default(cuid())
  screenSize String
  theater    Theater        @relation(fields: [theaterId], references: [id])
  theaterId  String         @db.VarChar(36)
  showings   Showing[]
  seats      Seat[]
  options    ScreenOption[] @relation("ScreenOptionRelation")
}

model ScreenOption {
  id      String   @id @default(cuid())
  name    String
  screens Screen[] @relation("ScreenOptionRelation")
}

model Seat {
  id           String        @id @default(cuid())
  screen       Screen        @relation(fields: [screenId], references: [id])
  screenId     String        @db.VarChar(36)
  row          Int
  column       Int
  reservations Reservation[] @relation("ReservationSeat")
  options      SeatOption[]  @relation("SeatOptionRelation")
}

model SeatOption {
  id    String @id @default(cuid())
  name  String
  seats Seat[] @relation("SeatOptionRelation")
}

model Movie {
  id          String        @id @default(cuid())
  name        String
  description String
  author      String
  showings    Showing[]
  options     MovieOption[] @relation("MovieOptionRelation")
}

model MovieOption {
  id     String  @id @default(cuid())
  name   String
  movies Movie[] @relation("MovieOptionRelation")
}

model Showing {
  id             String        @id @default(cuid())
  screen         Screen        @relation(fields: [screenId], references: [id])
  screenId       String        @db.VarChar(36)
  movie          Movie         @relation(fields: [movieId], references: [id])
  movieId        String        @db.VarChar(36)
  datetime       DateTime
  ageRestriction Int
  reservations   Reservation[]
}

model Reservation {
  id               String   @id @default(cuid())
  showing          Showing  @relation(fields: [showingId], references: [id])
  showingId        String   @db.VarChar(36)
  customer         Customer @relation(fields: [customerId], references: [id])
  customerId       String   @db.VarChar(36)
  numberOfAdults   Int
  numberOfChildren Int
  canceled         Boolean
  seats            Seat[]   @relation("ReservationSeat")
  payment          Payment?
  createdAt        DateTime @default(now())
}

model Customer {
  id           String        @id @default(cuid())
  email        String        @unique
  reservations Reservation[]
}

model Payment {
  id            String        @id @default(cuid())
  type          String
  reservation   Reservation   @relation(fields: [reservationId], references: [id])
  reservationId String        @unique @db.VarChar(36)
  price         Int
  paid          Boolean
  priceOptions  PriceOption[]
  createdAt     DateTime      @default(now())
}

model PriceOption {
  id        String  @id @default(cuid())
  name      String
  price     Int
  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId String  @db.VarChar(36)
}
